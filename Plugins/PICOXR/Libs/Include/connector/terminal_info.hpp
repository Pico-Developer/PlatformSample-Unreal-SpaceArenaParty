#pragma once

#include <atomic>
#include <map>

#include "../types.h"

namespace pxr
{
    namespace connector
    {
        class TerminalInfo
        {

        public:
            enum class Type
            {
                kObserver = 0,
                kHmdWireless,
                kHmdDp,
                kDriver,
                kRuntime,
                kPcApp,
                kHmdApp,
                kPcStreamApp,
                kPcDpApp,
            };

            static std::string ToString(TerminalInfo::Type type)
            {
                static std::map<TerminalInfo::Type, std::string>
                    kTerminalTypeName =
                {
                    {TerminalInfo::Type::kObserver, "Observer"},
                    {TerminalInfo::Type::kHmdWireless, "HmdWireless"},
                    {TerminalInfo::Type::kHmdDp, "HmdDp"},
                    {TerminalInfo::Type::kDriver, "Driver"},
                    {TerminalInfo::Type::kRuntime, "Runtime"},
                    {TerminalInfo::Type::kPcApp, "PcApp"},
                    {TerminalInfo::Type::kHmdApp, "HmdApp"},
                    {TerminalInfo::Type::kPcStreamApp, "PcStreamApp"},
                    {TerminalInfo::Type::kPcDpApp, "PcDpApp"}
                };
                if (kTerminalTypeName.count(type))
                {
                    return kTerminalTypeName[type];
                }
                return std::to_string((int)type);
            }

            void SetName_(const p_string& name);
            const p_string& GetName_() const;

            /**
             * \brief SetId_ is dangerous and useless for end-point, will be overwriten without notice.
             * \param
             */
            void SetId_(p_uint32 id);
            /**
             * \brief Get the id generated by remote server.
             */
            p_uint32 GetId_() const;


            void SetIp_(const p_string& ip);
            const p_string& GetIp_() const;

            void SetModel_(const p_string& model);
            const p_string& GetModel_() const;

            void SetSerialNumber_(const p_string& sn);
            const p_string& GetSerialNumber_() const;

            void SetSoftwareVersion_(const p_string& version);
            const p_string& GetSoftwareVersion_() const;

            void SetHardwareVersion_(const p_string& version);
            const p_string& GetHardwareVersion_() const;

            void SetTerminalType_(const Type& type);
            Type GetTerminalType_() const;


            /**
             * \brief
             * \param ts Timestamp in MS
             */
            void SetActiveTimestamp_(const p_int64& ts);
            p_int64 GetActiveTimestamp_() const;


            void SetActive_(p_bool active);
            p_bool GetActive_() const;

            /**
            * \brief This is used for RPC
            * \tparam Archive
            * \param ar
            */
            template <class Archive>
            void serialize(Archive& ar);

            TerminalInfo() = default;
            ~TerminalInfo() = default;

            TerminalInfo(const TerminalInfo& tf);
            TerminalInfo& operator=(const TerminalInfo& tf);


        private:
            p_uint32 id_ = 0;
            p_string name_;
            p_string ip_;
            p_string model_;
            p_string sn_;
            p_string software_version_;
            p_string hardware_version_;
            Type type_ = Type::kObserver;
            p_int64 last_active_ts_ = 0;
            p_bool is_active_ = false;
        };


        template <class Archive>
        void TerminalInfo::serialize(Archive& ar)
        {
            ar(id_);
            ar(name_);
            ar(ip_);
            ar(model_);
            ar(sn_);
            ar(software_version_);
            ar(hardware_version_);
            ar(type_);
            ar(last_active_ts_);
            ar(is_active_);
        }


        inline void TerminalInfo::SetName_(const p_string& name)
        {
            name_ = name;
        }

        inline const p_string& TerminalInfo::GetName_() const
        {
            return name_;
        }

        inline void TerminalInfo::SetId_(p_uint32 id)
        {
            id_ = id;
        }

        inline p_uint32 TerminalInfo::GetId_() const
        {
            return id_;
        }

        inline void TerminalInfo::SetIp_(const p_string& ip)
        {
            ip_ = ip;
        }

        inline const p_string& TerminalInfo::GetIp_() const
        {
            return ip_;
        }

        inline void TerminalInfo::SetModel_(const p_string& model)
        {
            model_ = model;
        }

        inline const p_string& TerminalInfo::GetModel_() const
        {
            return model_;
        }

        inline void TerminalInfo::SetSerialNumber_(const p_string& sn)
        {
            sn_ = sn;
        }

        inline const p_string& TerminalInfo::GetSerialNumber_() const
        {
            return sn_;
        }

        inline void TerminalInfo::SetSoftwareVersion_(const p_string& version)
        {
            software_version_ = version;
        }

        inline const p_string& TerminalInfo::GetSoftwareVersion_() const
        {
            return software_version_;
        }

        inline void TerminalInfo::SetHardwareVersion_(const p_string& version)
        {
            hardware_version_ = version;
        }

        inline const p_string& TerminalInfo::GetHardwareVersion_() const
        {
            return hardware_version_;
        }

        inline void TerminalInfo::SetTerminalType_(const Type& type)
        {
            type_ = type;
        }

        inline TerminalInfo::Type TerminalInfo::GetTerminalType_() const
        {
            return type_;
        }

        inline void TerminalInfo::SetActiveTimestamp_(const p_int64& ts)
        {
            last_active_ts_ = ts;
        }

        inline p_int64 TerminalInfo::GetActiveTimestamp_() const
        {
            return last_active_ts_;
        }

        inline void TerminalInfo::SetActive_(p_bool active)
        {
            is_active_ = active;
        }

        inline p_bool TerminalInfo::GetActive_() const
        {
            return is_active_;
        }

        inline TerminalInfo::TerminalInfo(const TerminalInfo& tf)
        {
            id_ = tf.id_;
            name_ = tf.name_;
            ip_ = tf.ip_;
            model_ = tf.model_;
            sn_ = tf.sn_;
            software_version_ = tf.software_version_;
            hardware_version_ = tf.hardware_version_;
            type_ = tf.type_;
            last_active_ts_ = tf.last_active_ts_;
            is_active_ = tf.is_active_;
        }

        inline TerminalInfo& TerminalInfo::operator=(const TerminalInfo& tf)
        {
            if (this != &tf)
            {
                id_ = tf.id_;
                name_ = tf.name_;
                ip_ = tf.ip_;
                model_ = tf.model_;
                sn_ = tf.sn_;
                software_version_ = tf.software_version_;
                hardware_version_ = tf.hardware_version_;
                type_ = tf.type_;
                last_active_ts_ = tf.last_active_ts_;
                is_active_ = tf.is_active_;
            }

            return *this;
        }

    }
}
